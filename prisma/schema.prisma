// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?  @map("hashedPassword") 
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments     Comment[]
  posts        Post[] 
  fundedPost String[]
  @@map("users")
}

model Post {
  id       String  @id @default(uuid())
  author   User @relation(fields: [authorId], references: [id])
  authorId String // relation scalar field  (used in the `@relation` attribute above)
  cover   String?
  mangaTitle String
  short String?
  content Json?
  topic String
  publishDate DateTime @default(now())
  likes Int @default(0)
  comments Comment[]
  funding Float @default(0)
  whoFunded String[]
}

model Comment {
  id       String  @id @default(uuid())
  author   User @relation(fields: [authorId], references: [id])
  authorId String // relation scalar field  (used in the `@relation` attribute above)
  post   Post @relation(fields: [postId], references: [id])
  postId String // relation scalar field  (used in the `@relation` attribute above)
  content String @default("")
  publishDate DateTime @default(now())
}

model Category {
  id    Int    @id @default(autoincrement())
  title String
  status Status
  cover String
  arc Arc[] 
}

model Arc {
  id    Int    @id @default(autoincrement())
  title String
  cover String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field  (used in the `@relation` attribute above)
}

enum Status {
  ONGOING
  COMPLETED
}

enum Role {
  USER
  ADMIN
  DEVELOPER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

// model Funding {
//   id       String  @id @default(uuid())
//   author   User @relation(fields: [authorId], references: [id])
//   authorId String // relation scalar field  (used in the `@relation` attribute above)
//   post   Post @relation(fields: [postId], references: [id])
//   postId String // relation scalar field  (used in the `@relation` attribute above)
//   amount Float
//   publishDate DateTime @default(now())
// }
